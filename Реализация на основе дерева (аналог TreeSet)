import java.util.Iterator;
import java.util.NoSuchElementException;

public class MyTreeSet<E extends Comparable<E>> implements Iterable<E> {
    private static class Node<E> {
        E item;
        Node<E> left;
        Node<E> right;
        Node<E> parent;

        Node(E item, Node<E> parent) {
            this.item = item;
            this.parent = parent;
        }
    }

    private Node<E> root;
    private int size;
    private final boolean allowNull;

    // Конструкторы
    public MyTreeSet() {
        this(false);
    }

    public MyTreeSet(boolean allowNull) {
        this.root = null;
        this.size = 0;
        this.allowNull = allowNull;
    }

    // Добавление элемента
    public boolean add(E e) {
        if (e == null && !allowNull) {
            throw new NullPointerException("Null elements are not allowed");
        }

        if (root == null) {
            root = new Node<>(e, null);
            size++;
            return true;
        }

        Node<E> current = root;
        Node<E> parent;
        int cmp;

        do {
            parent = current;
            cmp = e.compareTo(current.item);
            
            if (cmp < 0) {
                current = current.left;
            } else if (cmp > 0) {
                current = current.right;
            } else {
                return false; // Элемент уже существует
            }
        } while (current != null);

        Node<E> newNode = new Node<>(e, parent);
        if (cmp < 0) {
            parent.left = newNode;
        } else {
            parent.right = newNode;
        }
        size++;
        return true;
    }

    // Проверка наличия элемента
    public boolean contains(E e) {
        if (e == null && !allowNull) {
            return false;
        }
        return findNode(e) != null;
    }

    // Удаление элемента
    public boolean remove(E e) {
        if (e == null && !allowNull) {
            return false;
        }

        Node<E> node = findNode(e);
        if (node == null) {
            return false;
        }

        deleteNode(node);
        size--;
        return true;
    }

    // Размер множества
    public int size() {
        return size;
    }

    // Проверка на пустоту
    public boolean isEmpty() {
        return size == 0;
    }

    // Очистка множества
    public void clear() {
        root = null;
        size = 0;
    }

    // Поиск минимального элемента
    public E first() {
        if (root == null) {
            throw new NoSuchElementException();
        }
        return findMin(root).item;
    }

    // Поиск максимального элемента
    public E last() {
        if (root == null) {
            throw new NoSuchElementException();
        }
        return findMax(root).item;
    }

    // Вспомогательные методы
    private Node<E> findNode(E e) {
        Node<E> current = root;
        while (current != null) {
            int cmp = e.compareTo(current.item);
            if (cmp < 0) {
                current = current.left;
            } else if (cmp > 0) {
                current = current.right;
            } else {
                return current;
            }
        }
        return null;
    }

    private Node<E> findMin(Node<E> node) {
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }

    private Node<E> findMax(Node<E> node) {
        while (node.right != null) {
            node = node.right;
        }
        return node;
    }

    private void deleteNode(Node<E> node) {
        // Узел с двумя детьми
        if (node.left != null && node.right != null) {
            Node<E> successor = findMin(node.right);
            node.item = successor.item;
            node = successor;
        }

        // Узел с одним ребенком или без детей
        Node<E> replacement = (node.left != null) ? node.left : node.right;

        if (replacement != null) {
            replacement.parent = node.parent;
            if (node.parent == null) {
                root = replacement;
            } else if (node == node.parent.left) {
                node.parent.left = replacement;
            } else {
                node.parent.right = replacement;
            }
        } else if (node.parent == null) {
            root = null;
        } else {
            if (node == node.parent.left) {
                node.parent.left = null;
            } else {
                node.parent.right = null;
            }
        }
    }

    // Итератор (in-order traversal)
    @Override
    public Iterator<E> iterator() {
        return new TreeSetIterator();
    }

    private class TreeSetIterator implements Iterator<E> {
        private Node<E> next;

        TreeSetIterator() {
            next = root;
            if (next != null) {
                while (next.left != null) {
                    next = next.left;
                }
            }
        }

        @Override
        public boolean hasNext() {
            return next != null;
        }

        @Override
        public E next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }

            Node<E> current = next;

            // Находим следующий элемент
            if (next.right != null) {
                next = next.right;
                while (next.left != null) {
                    next = next.left;
                }
            } else {
                Node<E> parent = next.parent;
                while (parent != null && next == parent.right) {
                    next = parent;
                    parent = parent.parent;
                }
                next = parent;
            }

            return current.item;
        }
    }

    @Override
    public String toString() {
        if (size == 0) {
            return "[]";
        }

        StringBuilder sb = new StringBuilder();
        sb.append('[');
        
        Iterator<E> it = iterator();
        while (it.hasNext()) {
            sb.append(it.next());
            if (it.hasNext()) {
                sb.append(", ");
            }
        }
        
        sb.append(']');
        return sb.toString();
    }
}
